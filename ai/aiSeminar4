PS								
Particles
- position x = (x1,..,xn)
- velocity v = (v1,..,vn)
- memory xbest (xb1,..,xbn)
- fitness 
- bestNeighboursPosition pBest = (pb1,..,pbn)

- iteration: 
	for each particle
		-find best neighbour (position)
		-update velocity (dupa best neighbour si memory best position)
		-evaluate
		[ -update memory ]

	v(i, t + 1) =  w * v(i, t) + c1 * random() * (pb(i) - x(i)) + c2 * random() * (xb(i) - x(i))
	
	real: 
		xi(t + 1) = xi(t) + vi(t+1)
		xi apartine [ai, bi]
		xi(t + 1) = xi(t + 1), xi(t+1) apartine [ai, bi]
					ai, xi(t+1) < a
					bi, xi(t+1) > b
				
	binary:
		xi apartine {0,1}
		xi(t+1) = 1, random() < s(vi(t+1))
				  0, otherwise
		s(v(t+1))=  1 / (1 + e^(-vi(t+1)))
	
	intger: 
		xi apartine {1,..,m}, i = 1,m
		xi(t+1) = randint(1,m), random() < s(vi(t+1))
				  xi(t), otherwise
				
	permutation:
		x apartine P(n) (permutari) 
		n = 6
		x = (3,5,4,2,6,1)
		Pbest = (1,6,5,2,4,3)
		i = 3
		random() < s(v3(t+1)), swap 5 <-> 4
		
		if you want it in words, better write an interpreter lol.
		
	
	ACO -> naturally only fixes TSP (travelling salesman)
	
	permutation: 
		n = 6
		you just do the thing, right?
	binary:
		xi {0,1} , i = 1,n 
		
		0 - - - 0 - - - 0 - - - 0 - - - 0 - - - 0 - - - 0 - - - 0 - - - 
		  -   -   -   -  -   -  -   -  -   -  -   -  -   -  -   -  -   -
		    -       -      -     -     -     -     -     -     -     -     
		  -   - -   - -   - -   - -   - -   - -   - -   - -   - -   - - 
		1 - - -  it's fucked nevermind.
		
	integer:
		xi apartine {1,..,m}, i = 1,n
		that thing but with integers.
	
	real:
		- xi apartine [ai, bi]
		- stabilesc eroarea sa fie 10^L [xi * 10^L] = xi <- cifre M(10x10x(nk*L))
		
		pro attendance man